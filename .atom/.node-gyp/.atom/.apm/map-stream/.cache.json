{"_id":"map-stream","_rev":"11-36edec2f0c823a7335cf39bd9c94d816","name":"map-stream","description":"construct pipes of streams of events","dist-tags":{"latest":"0.1.0"},"versions":{"0.0.1":{"name":"map-stream","version":"0.0.1","description":"construct pipes of streams of events","homepage":"http://github.com/dominictarr/map-stream","repository":{"type":"git","url":"git://github.com/dominictarr/map-stream.git"},"dependencies":{},"devDependencies":{"asynct":"*","it-is":"1","ubelt":"~2.9","stream-spec":"~0.2","event-stream":"~2.1","from":"0.0.2"},"scripts":{"test":"asynct test/"},"author":{"name":"Dominic Tarr","email":"dominic.tarr@gmail.com","url":"http://dominictarr.com"},"readme":"# MapStream\n\nRefactored out of [event-stream](https://github.com/dominictarr/event-stream)\n\n##map (asyncFunction)\n\nCreate a through stream from an asyncronous function.  \n\n``` js\nvar es = require('event-stream')\n\nes.map(function (data, callback) {\n  //transform data\n  // ...\n  callback(null, data)\n})\n\n```\n\nEach map MUST call the callback. It may callback with data, with an error or with no arguments, \n\n  * `callback()` drop this data.  \n    this makes the map work like `filter`,  \n    note:`callback(null,null)` is not the same, and will emit `null`\n\n  * `callback(null, newData)` turn data into newData\n    \n  * `callback(error)` emit an error for this item.\n\n>Note: if a callback is not called, `map` will think that it is still being processed,   \n>every call must be answered or the stream will not know when to end.  \n>\n>Also, if the callback is called more than once, every call but the first will be ignored.\n\n\n","_id":"map-stream@0.0.1","dist":{"shasum":"7fd2a254f97e9272aa634717bfc3e73c0662afaa","tarball":"http://registry.npmjs.org/map-stream/-/map-stream-0.0.1.tgz"},"maintainers":[{"name":"dominictarr","email":"dominic.tarr@gmail.com"}],"directories":{}},"0.0.2":{"name":"map-stream","version":"0.0.2","description":"construct pipes of streams of events","homepage":"http://github.com/dominictarr/map-stream","repository":{"type":"git","url":"git://github.com/dominictarr/map-stream.git"},"dependencies":{},"devDependencies":{"asynct":"*","it-is":"1","ubelt":"~2.9","stream-spec":"~0.2","event-stream":"~2.1","from":"0.0.2"},"scripts":{"test":"asynct test/"},"author":{"name":"Dominic Tarr","email":"dominic.tarr@gmail.com","url":"http://dominictarr.com"},"readme":"# MapStream\n\nRefactored out of [event-stream](https://github.com/dominictarr/event-stream)\n\n##map (asyncFunction)\n\nCreate a through stream from an asyncronous function.  \n\n``` js\nvar map = require('map-stream')\n\nmap(function (data, callback) {\n  //transform data\n  // ...\n  callback(null, data)\n})\n\n```\n\nEach map MUST call the callback. It may callback with data, with an error or with no arguments, \n\n  * `callback()` drop this data.  \n    this makes the map work like `filter`,  \n    note:`callback(null,null)` is not the same, and will emit `null`\n\n  * `callback(null, newData)` turn data into newData\n    \n  * `callback(error)` emit an error for this item.\n\n>Note: if a callback is not called, `map` will think that it is still being processed,   \n>every call must be answered or the stream will not know when to end.  \n>\n>Also, if the callback is called more than once, every call but the first will be ignored.\n\n\n","readmeFilename":"readme.markdown","_id":"map-stream@0.0.2","dist":{"shasum":"2fb8d4063cc58eec6953bfab1b2f44271d1c8765","tarball":"http://registry.npmjs.org/map-stream/-/map-stream-0.0.2.tgz"},"_npmVersion":"1.1.70","_npmUser":{"name":"dominictarr","email":"dominic.tarr@gmail.com"},"maintainers":[{"name":"dominictarr","email":"dominic.tarr@gmail.com"}],"directories":{}},"0.0.3":{"name":"map-stream","version":"0.0.3","description":"construct pipes of streams of events","homepage":"http://github.com/dominictarr/map-stream","repository":{"type":"git","url":"git://github.com/dominictarr/map-stream.git"},"dependencies":{},"devDependencies":{"asynct":"*","it-is":"1","ubelt":"~2.9","stream-spec":"~0.2","event-stream":"~2.1","from":"0.0.2"},"scripts":{"test":"asynct test/"},"author":{"name":"Dominic Tarr","email":"dominic.tarr@gmail.com","url":"http://dominictarr.com"},"readme":"# MapStream\n\nRefactored out of [event-stream](https://github.com/dominictarr/event-stream)\n\n##map (asyncFunction)\n\nCreate a through stream from an asyncronous function.  \n\n``` js\nvar map = require('map-stream')\n\nmap(function (data, callback) {\n  //transform data\n  // ...\n  callback(null, data)\n})\n\n```\n\nEach map MUST call the callback. It may callback with data, with an error or with no arguments, \n\n  * `callback()` drop this data.  \n    this makes the map work like `filter`,  \n    note:`callback(null,null)` is not the same, and will emit `null`\n\n  * `callback(null, newData)` turn data into newData\n    \n  * `callback(error)` emit an error for this item.\n\n>Note: if a callback is not called, `map` will think that it is still being processed,   \n>every call must be answered or the stream will not know when to end.  \n>\n>Also, if the callback is called more than once, every call but the first will be ignored.\n\n\n","readmeFilename":"readme.markdown","bugs":{"url":"https://github.com/dominictarr/map-stream/issues"},"_id":"map-stream@0.0.3","dist":{"shasum":"94759c696083c312b3fc3a299e1c64a0423ef1ae","tarball":"http://registry.npmjs.org/map-stream/-/map-stream-0.0.3.tgz"},"_from":".","_npmVersion":"1.3.6","_npmUser":{"name":"dominictarr","email":"dominic.tarr@gmail.com"},"maintainers":[{"name":"dominictarr","email":"dominic.tarr@gmail.com"}],"directories":{}},"0.0.4":{"name":"map-stream","version":"0.0.4","description":"construct pipes of streams of events","homepage":"http://github.com/dominictarr/map-stream","repository":{"type":"git","url":"git://github.com/dominictarr/map-stream.git"},"dependencies":{},"devDependencies":{"asynct":"*","it-is":"1","ubelt":"~2.9","stream-spec":"~0.2","event-stream":"~2.1","from":"0.0.2"},"scripts":{"test":"asynct test/"},"author":{"name":"Dominic Tarr","email":"dominic.tarr@gmail.com","url":"http://dominictarr.com"},"readme":"# MapStream\n\nRefactored out of [event-stream](https://github.com/dominictarr/event-stream)\n\n##map (asyncFunction)\n\nCreate a through stream from an asyncronous function.  \n\n``` js\nvar map = require('map-stream')\n\nmap(function (data, callback) {\n  //transform data\n  // ...\n  callback(null, data)\n})\n\n```\n\nEach map MUST call the callback. It may callback with data, with an error or with no arguments, \n\n  * `callback()` drop this data.  \n    this makes the map work like `filter`,  \n    note:`callback(null,null)` is not the same, and will emit `null`\n\n  * `callback(null, newData)` turn data into newData\n    \n  * `callback(error)` emit an error for this item.\n\n>Note: if a callback is not called, `map` will think that it is still being processed,   \n>every call must be answered or the stream will not know when to end.  \n>\n>Also, if the callback is called more than once, every call but the first will be ignored.\n\n\n","readmeFilename":"readme.markdown","bugs":{"url":"https://github.com/dominictarr/map-stream/issues"},"_id":"map-stream@0.0.4","dist":{"shasum":"5ec6de90213ef6c7b2eb9367e9ade8da4efdb68b","tarball":"http://registry.npmjs.org/map-stream/-/map-stream-0.0.4.tgz"},"_from":".","_npmVersion":"1.3.11","_npmUser":{"name":"dominictarr","email":"dominic.tarr@gmail.com"},"maintainers":[{"name":"dominictarr","email":"dominic.tarr@gmail.com"}],"directories":{}},"0.1.0":{"name":"map-stream","version":"0.1.0","description":"construct pipes of streams of events","homepage":"http://github.com/dominictarr/map-stream","repository":{"type":"git","url":"git://github.com/dominictarr/map-stream.git"},"dependencies":{},"devDependencies":{"asynct":"*","it-is":"1","ubelt":"~2.9","stream-spec":"~0.2","event-stream":"~2.1","from":"0.0.2"},"scripts":{"test":"asynct test/"},"author":{"name":"Dominic Tarr","email":"dominic.tarr@gmail.com","url":"http://dominictarr.com"},"readme":"# MapStream\n\nRefactored out of [event-stream](https://github.com/dominictarr/event-stream)\n\n##map (asyncFunction[, options])\n\nCreate a through stream from an asyncronous function.  \n\n``` js\nvar map = require('map-stream')\n\nmap(function (data, callback) {\n  //transform data\n  // ...\n  callback(null, data)\n})\n\n```\n\nEach map MUST call the callback. It may callback with data, with an error or with no arguments, \n\n  * `callback()` drop this data.  \n    this makes the map work like `filter`,  \n    note:`callback(null,null)` is not the same, and will emit `null`\n\n  * `callback(null, newData)` turn data into newData\n    \n  * `callback(error)` emit an error for this item.\n\n>Note: if a callback is not called, `map` will think that it is still being processed,   \n>every call must be answered or the stream will not know when to end.  \n>\n>Also, if the callback is called more than once, every call but the first will be ignored.\n\n##Options \n\n * `failures` - `boolean` continue mapping even if error occured. On error `map-stream` will emit `failure` event. (default: `false`)\n","readmeFilename":"readme.markdown","bugs":{"url":"https://github.com/dominictarr/map-stream/issues"},"_id":"map-stream@0.1.0","dist":{"shasum":"e56aa94c4c8055a16404a0674b78f215f7c8e194","tarball":"http://registry.npmjs.org/map-stream/-/map-stream-0.1.0.tgz"},"_from":".","_npmVersion":"1.3.21","_npmUser":{"name":"dominictarr","email":"dominic.tarr@gmail.com"},"maintainers":[{"name":"dominictarr","email":"dominic.tarr@gmail.com"}],"directories":{}}},"readme":"# MapStream\n\nRefactored out of [event-stream](https://github.com/dominictarr/event-stream)\n\n##map (asyncFunction[, options])\n\nCreate a through stream from an asyncronous function.  \n\n``` js\nvar map = require('map-stream')\n\nmap(function (data, callback) {\n  //transform data\n  // ...\n  callback(null, data)\n})\n\n```\n\nEach map MUST call the callback. It may callback with data, with an error or with no arguments, \n\n  * `callback()` drop this data.  \n    this makes the map work like `filter`,  \n    note:`callback(null,null)` is not the same, and will emit `null`\n\n  * `callback(null, newData)` turn data into newData\n    \n  * `callback(error)` emit an error for this item.\n\n>Note: if a callback is not called, `map` will think that it is still being processed,   \n>every call must be answered or the stream will not know when to end.  \n>\n>Also, if the callback is called more than once, every call but the first will be ignored.\n\n##Options \n\n * `failures` - `boolean` continue mapping even if error occured. On error `map-stream` will emit `failure` event. (default: `false`)\n","maintainers":[{"name":"dominictarr","email":"dominic.tarr@gmail.com"}],"time":{"0.0.1":"2012-08-18T13:07:33.660Z","0.0.2":"2013-01-17T04:54:50.995Z","0.0.3":"2013-09-24T03:42:27.320Z","0.0.4":"2013-12-07T02:05:06.804Z","0.1.0":"2014-01-09T07:15:35.544Z"},"author":{"name":"Dominic Tarr","email":"dominic.tarr@gmail.com","url":"http://dominictarr.com"},"repository":{"type":"git","url":"git://github.com/dominictarr/map-stream.git"},"users":{"brianloveswords":true},"_attachments":{},"_etag":"\"1BSMCZMOLAE99UOTX99GIAWI3\""}